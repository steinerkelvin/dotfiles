#!/usr/bin/env -S uv run --script
"""
Assistant helper script for Claude Code.
Provides utility commands for the AI assistant.
"""

# /// script
# requires-python = ">=3.8"
# dependencies = [
#   "typer>=0.9.0",
#   "rich>=13.4.2",
# ]
# ///
import sys
import datetime
import subprocess
import typer
from typing import Optional
from rich.console import Console

# Initialize Typer app and Rich console
app = typer.Typer(help="Helper utilities for Claude assistant")
console = Console()

@app.command("date")
def cmd_date():
    """Print current date in ISO format (down to minutes)"""
    now = datetime.datetime.now()
    console.print(now.strftime("%Y-%m-%d %H:%M"))

@app.command("show-lines")
def cmd_show_lines(
    file_path: str = typer.Argument(..., help="Path to the file"),
    start_line: int = typer.Argument(..., help="Starting line number"),
    count: int = typer.Argument(..., help="Number of lines to show")
):
    """Show a specific range of lines from a file, with line numbers"""
    try:
        # Execute the command: cat -n file | tail -n +start_line | head -n count
        cmd = f"cat -n {file_path} | tail -n +{start_line} | head -n {count}"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode != 0:
            console.print(f"Error: {result.stderr}", style="bold red", file=sys.stderr)
            sys.exit(1)
            
        console.print(result.stdout, end="")
    except Exception as e:
        console.print(f"Error: {e}", style="bold red", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    app()