#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.8"
# dependencies = [
#   "typer>=0.9.0",
#   "rich>=13.4.2",
# ]
# ///
"""
Atuin History Cleaner

This script helps analyze and clean your Atuin shell history.
It identifies and categorizes commands based on exit codes and patterns,
and provides recommendations for cleaning.

# Atuin History Management Process

This document outlines our approach to cleaning and maintaining Atuin shell history.

## What Atuin Stores

Atuin records:
- Commands executed
- Exit codes (success/failure)
- Timestamps and duration
- Directory where commands were run
- Host information
- Does NOT store command output (stdout)

## Cleaning Strategy

We've developed a systematic approach to cleaning Atuin history using this tool.

### Key Categories for Cleaning

1. **Command Not Found Errors** (exit code 127)
   - Unknown commands that should be deleted
   - May contain typos or obsolete command attempts

2. **Invalid Path Operations**
   - Commands that reference non-existent directories or files
   - Often incorrect paths in mkdir, touch, cd, etc.

3. **Potential Typos**
   - Identified by comparing similar commands 
   - Commands with low success rates compared to similar ones
   - Example: "brrot" vs "brew", "clac" vs "calc"

4. **Interrupted Commands** (exit code 130)
   - Commands terminated with Ctrl+C
   - Require careful handling as interruption doesn't mean error

## Cleaning Process

The tool provides three main functions:

### 1. Analysis Mode
```bash
k-atuin-clean analyze
```
- Generates comprehensive statistics on command history
- Identifies patterns of failures and potential typos
- Shows exit code distribution and low success rate commands
- Use this first to understand your history patterns

### 2. Interactive Mode
```bash
k-atuin-clean interactive
```
- Reviews commands by category for selective deletion
- Allows batch processing with confirmation
- Supports custom pattern matching for targeted cleanup
- Recommended for careful, selective cleaning

### 3. Automatic Mode
```bash
k-atuin-clean clean --dry-run  # Preview
k-atuin-clean clean            # Execute
```
- Applies predefined rules to identify cleanup candidates
- Useful for routine maintenance after establishing patterns

## Maintenance Recommendations

1. **Regular Analysis**
   - Run `analyze` monthly to identify new patterns
   - Look for commands with low success rates

2. **Configure Exclusion Filters**
   - Set up `history_filter` in `~/.config/atuin/config.toml`
   - Prevents recording of sensitive or noisy commands

3. **Scheduled Cleaning**
   - Run `clean --dry-run` periodically to check for candidates
   - Follow with `clean` to remove unwanted entries

4. **Review Command Patterns**
   - Use `atuin stats` to identify frequently used commands
   - Consider creating aliases for common typos

## Future Improvements

- Enhance similarity detection for better typo identification
- Implement command context tracking for more intelligent cleaning
- Add temporal analysis to identify obsolete commands
- Improve interactive mode with more filtering options
- Consider automatic periodic cleaning routines

The goal of this process is to maintain a clean, useful command history while removing noise from failed commands and typos, making Atuin's search features more effective.
"""

import re
import subprocess
import sys
from collections import Counter, defaultdict
from difflib import SequenceMatcher
from typing import Dict, List, Optional, Set, Tuple

import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text

app = typer.Typer(help="Atuin History Cleaner")
console = Console()


class AtuinHistoryCleaner:
    def __init__(self):
        self.history = []
        self.load_history()

    def load_history(self) -> None:
        """Load history from atuin"""
        try:
            with console.status("Loading history from atuin..."):
                # Use tab-separated format for reliable parsing
                result = subprocess.run(
                    ["atuin", "history", "list", "--format", "{exit}\t{command}\t{time}"],
                    capture_output=True,
                    text=True,
                    check=True,
                )
                
                # Parse history entries
                self.history = []
                for line in result.stdout.strip().split("\n"):
                    if not line.strip():
                        continue
                    
                    parts = line.split("\t", 2)
                    if len(parts) < 3:
                        continue
                        
                    exit_code_str, command, timestamp = parts
                    try:
                        exit_code = int(exit_code_str)
                    except ValueError:
                        exit_code = -1
                        
                    self.history.append({
                        "exit_code": exit_code,
                        "command": command,
                        "timestamp": timestamp
                    })
                
            console.print(f"[green]Loaded {len(self.history)} history entries[/green]")
            
        except subprocess.CalledProcessError as e:
            console.print(f"[bold red]Error loading history: {e}[/bold red]")
            sys.exit(1)

    def analyze_history(self) -> Dict:
        """Analyze history and return statistics"""
        with console.status("Analyzing history..."):
            stats = {
                "total_commands": len(self.history),
                "exit_code_distribution": Counter(),
                "command_frequencies": Counter(),
                "command_success_rates": {},
                "potential_typos": [],
                "invalid_paths": [],
                "interrupted_commands": [],
                "not_found_commands": [],
            }
            
            # Command first words
            command_words = defaultdict(list)
            
            # Process history
            for entry in self.history:
                exit_code = entry["exit_code"]
                command = entry["command"]
                
                stats["exit_code_distribution"][exit_code] += 1
                
                # Extract first word of command
                first_word = command.split()[0] if " " in command else command
                stats["command_frequencies"][first_word] += 1
                
                # Track success/failure by command
                if first_word not in stats["command_success_rates"]:
                    stats["command_success_rates"][first_word] = {"total": 0, "success": 0}
                
                stats["command_success_rates"][first_word]["total"] += 1
                if exit_code == 0:
                    stats["command_success_rates"][first_word]["success"] += 1
                    
                # Group commands by first word
                command_words[first_word].append({"exit_code": exit_code, "command": command})
                
                # Find "command not found" errors (exit code 127)
                if exit_code == 127:
                    stats["not_found_commands"].append(command)
                    
                # Find interrupted commands (exit code 130)
                if exit_code == 130:
                    stats["interrupted_commands"].append(command)
                    
                # Detect invalid path operations
                if (re.search(r"(mkdir|touch|cd|ls|cat)\s+[^\s/]+/", command) and 
                    exit_code != 0 and not command.startswith("cd /")):
                    stats["invalid_paths"].append(command)
            
            # Calculate success rates
            for cmd, data in stats["command_success_rates"].items():
                if data["total"] >= 5:  # Only for commands used at least 5 times
                    data["rate"] = data["success"] / data["total"] * 100
            
            # Find potential typos
            unique_commands = set(entry["command"] for entry in self.history)
            for cmd1 in unique_commands:
                first_word1 = cmd1.split()[0] if " " in cmd1 else cmd1
                for cmd2 in unique_commands:
                    if cmd1 == cmd2:
                        continue
                    first_word2 = cmd2.split()[0] if " " in cmd2 else cmd2
                    
                    # Check if first words are similar but not identical
                    if (first_word1 != first_word2 and 
                        len(first_word1) > 2 and len(first_word2) > 2 and
                        SequenceMatcher(None, first_word1, first_word2).ratio() > 0.7):
                        stats["potential_typos"].append((first_word1, first_word2))
            
            return stats

    def print_analysis(self, stats: Dict) -> None:
        """Print analysis results in a readable format"""
        console.print(Panel.fit("[bold]ATUIN HISTORY ANALYSIS[/bold]", border_style="blue"))
        console.print(f"Total commands: {stats['total_commands']}")
        
        # Exit code distribution table
        console.print("\n[bold]Exit Code Distribution[/bold]")
        table = Table(show_header=True, header_style="bold")
        table.add_column("Exit Code")
        table.add_column("Count")
        table.add_column("Percentage")
        table.add_column("Meaning")
        
        for code, count in sorted(stats["exit_code_distribution"].items()):
            percentage = (count / stats["total_commands"]) * 100
            code_meaning = self.explain_exit_code(code)
            table.add_row(
                str(code),
                str(count),
                f"{percentage:.1f}%",
                code_meaning
            )
        console.print(table)
        
        # Commands with low success rates
        console.print("\n[bold]Commands with Low Success Rates (<60%)[/bold]")
        low_success = Table(show_header=True)
        low_success.add_column("Command")
        low_success.add_column("Total Uses")
        low_success.add_column("Success Rate")
        
        has_low_success = False
        for cmd, data in stats["command_success_rates"].items():
            if data.get("rate", 100) < 60 and data["total"] >= 5:
                has_low_success = True
                low_success.add_row(
                    cmd,
                    str(data["total"]),
                    f"{data['rate']:.1f}%"
                )
        
        if has_low_success:
            console.print(low_success)
        else:
            console.print("[green]No commands with low success rates found.[/green]")
        
        # Potential typos
        console.print("\n[bold]Potential Typos[/bold]")
        seen_pairs: Set[Tuple[str, str]] = set()
        if stats["potential_typos"]:
            for cmd1, cmd2 in stats["potential_typos"]:
                pair = tuple(sorted([cmd1, cmd2]))
                if pair not in seen_pairs:
                    seen_pairs.add(pair)
                    console.print(f"{cmd1} <-> {cmd2}")
        else:
            console.print("[green]No potential typos found.[/green]")
        
        # Command not found
        console.print("\n[bold]Command Not Found (samples)[/bold]")
        if stats["not_found_commands"]:
            for cmd in stats["not_found_commands"][:20]:  # Show only first 20
                console.print(f"- {cmd}")
            if len(stats["not_found_commands"]) > 20:
                console.print(f"... and {len(stats['not_found_commands']) - 20} more")
        else:
            console.print("[green]No 'command not found' entries.[/green]")
        
        # Interrupted commands
        console.print("\n[bold]Interrupted Commands (samples)[/bold]")
        if stats["interrupted_commands"]:
            for cmd in stats["interrupted_commands"][:20]:  # Show only first 20
                console.print(f"- {cmd}")
            if len(stats["interrupted_commands"]) > 20:
                console.print(f"... and {len(stats['interrupted_commands']) - 20} more")
        else:
            console.print("[green]No interrupted commands found.[/green]")
        
        # Invalid path operations
        console.print("\n[bold]Invalid Path Operations (samples)[/bold]")
        if stats["invalid_paths"]:
            for cmd in stats["invalid_paths"][:20]:  # Show only first 20
                console.print(f"- {cmd}")
            if len(stats["invalid_paths"]) > 20:
                console.print(f"... and {len(stats['invalid_paths']) - 20} more")
        else:
            console.print("[green]No invalid path operations found.[/green]")
        
        # Recommendations
        console.print(Panel.fit("[bold]RECOMMENDATIONS[/bold]", border_style="green"))
        console.print("1. Delete 'command not found' entries (exit code 127)")
        console.print("2. Review and clean potential typos")
        console.print("3. Clean invalid path operations")
        console.print("4. Consider setting up atuin exclusion filters for common patterns")

    def explain_exit_code(self, code: int) -> str:
        """Explain what an exit code means"""
        explanations = {
            0: "Success",
            1: "General error",
            2: "Misuse of shell builtins",
            126: "Command invoked cannot execute",
            127: "Command not found",
            128: "Invalid exit argument",
            129: "SIGHUP (Hangup)",
            130: "SIGINT (Terminal interrupt, usually Ctrl+C)",
            131: "SIGQUIT (Terminal quit)",
            137: "SIGKILL (Kill signal)",
            143: "SIGTERM (Termination signal)",
        }
        
        return explanations.get(code, "Unknown")

    def get_candidates_for_deletion(self) -> Dict[str, List[str]]:
        """Get candidates for deletion based on different categories"""
        with console.status("Finding candidates for deletion..."):
            stats = self.analyze_history()
            
            candidates = {
                "not_found": stats["not_found_commands"],
                "interrupted": [],  # We don't delete all interrupted commands by default
                "invalid_paths": stats["invalid_paths"],
                "typos": [],  # Need further processing
            }
            
            # Process potential typos
            seen_pairs = set()
            for cmd1, cmd2 in stats["potential_typos"]:
                pair = tuple(sorted([cmd1, cmd2]))
                if pair not in seen_pairs:
                    seen_pairs.add(pair)
                    
                    # Check which one has a higher failure rate
                    rate1 = stats["command_success_rates"].get(cmd1, {}).get("rate", 100)
                    rate2 = stats["command_success_rates"].get(cmd2, {}).get("rate", 100)
                    
                    # If one is significantly worse than the other, mark it as a typo
                    if rate1 < 50 and rate2 > 70:
                        candidates["typos"].append(cmd1)
                    elif rate2 < 50 and rate1 > 70:
                        candidates["typos"].append(cmd2)
            
            return candidates

    def run_interactive_cleaning(self) -> None:
        """Run interactive cleaning session"""
        self.analyze_history()  # Just run the analysis
        candidates = self.get_candidates_for_deletion()
        
        console.print(Panel.fit("[bold]INTERACTIVE CLEANING SESSION[/bold]", border_style="blue"))
        console.print("Review and confirm deletions for each category.")
        
        to_delete = []
        
        # 1. Command not found
        console.print(f"\n[bold]Command Not Found (Exit Code 127): {len(candidates['not_found'])} commands[/bold]")
        if typer.confirm("Review 'command not found' entries?"):
            reviewed = self.review_list(candidates["not_found"], "command not found")
            to_delete.extend(reviewed)
            
        # 2. Invalid paths
        console.print(f"\n[bold]Invalid Path Operations: {len(candidates['invalid_paths'])} commands[/bold]")
        if typer.confirm("Review invalid path operations?"):
            reviewed = self.review_list(candidates['invalid_paths'], "invalid path")
            to_delete.extend(reviewed)
            
        # 3. Potential typos
        console.print(f"\n[bold]Potential Typos: {len(candidates['typos'])} commands[/bold]")
        if typer.confirm("Review potential typos?"):
            reviewed = self.review_list(candidates['typos'], "potential typo")
            to_delete.extend(reviewed)
        
        # 4. Custom patterns
        if typer.confirm("Add custom patterns to search for?"):
            while True:
                pattern = typer.prompt("Enter search pattern (or empty to stop)").strip()
                if not pattern:
                    break
                    
                matches = [entry["command"] for entry in self.history 
                          if re.search(pattern, entry["command"])]
                
                if matches:
                    console.print(f"Found {len(matches)} matches for pattern '[bold]{pattern}[/bold]'")
                    reviewed = self.review_list(matches, f"match for '{pattern}'")
                    to_delete.extend(reviewed)
                else:
                    console.print(f"[yellow]No matches found for pattern '{pattern}'[/yellow]")
        
        # Execute deletion
        if to_delete:
            if typer.confirm(f"Delete {len(to_delete)} selected commands? THIS CANNOT BE UNDONE"):
                self.delete_commands(to_delete)
        else:
            console.print("[yellow]No commands selected for deletion.[/yellow]")

    def review_list(self, items: List[str], category: str) -> List[str]:
        """Review a list of items and return those to delete"""
        to_delete = []
        
        if not items:
            console.print(f"[yellow]No {category} items to review.[/yellow]")
            return to_delete
            
        console.print(f"\nReviewing {len(items)} {category} items:")
        
        batch_size = 10
        for i in range(0, len(items), batch_size):
            batch = items[i:i+batch_size]
            
            console.print("\n[bold]Commands:[/bold]")
            for idx, cmd in enumerate(batch, 1):
                console.print(f"{idx}. {cmd}")
                
            selection = typer.prompt(
                "Enter numbers to delete (e.g. 1,3,5-7), 'a' for all, 's' to skip batch, 'q' to finish"
            ).strip()
            
            if selection.lower() == 'q':
                break
            elif selection.lower() == 's':
                continue
            elif selection.lower() == 'a':
                to_delete.extend(batch)
            elif selection:
                try:
                    # Parse selections like 1,3,5-7
                    for part in selection.split(','):
                        if '-' in part:
                            start, end = map(int, part.split('-'))
                            if 1 <= start <= end <= len(batch):
                                to_delete.extend(batch[idx-1] for idx in range(start, end+1))
                        else:
                            idx = int(part)
                            if 1 <= idx <= len(batch):
                                to_delete.append(batch[idx-1])
                except ValueError:
                    console.print("[bold red]Invalid selection, skipping batch.[/bold red]")
        
        return to_delete

    def delete_commands(self, commands: List[str], dry_run: bool = False) -> None:
        """Delete commands from atuin history"""
        with console.status("Deleting commands..."):
            for cmd in commands:
                status = "[yellow]Would delete[/yellow]" if dry_run else "[red]Deleting[/red]"
                console.print(f"{status}: {cmd}")
                if not dry_run:
                    try:
                        result = subprocess.run(
                            ["atuin", "search", cmd, "--delete"],
                            capture_output=True,
                            text=True
                        )
                        if result.returncode != 0:
                            console.print(f"[bold red]Error deleting '{cmd}': {result.stderr}[/bold red]")
                    except Exception as e:
                        console.print(f"[bold red]Exception when deleting '{cmd}': {e}[/bold red]")
            
            status = "[yellow]Would have deleted[/yellow]" if dry_run else "[green]Deleted[/green]"
            console.print(f"{status} {len(commands)} commands")

    def automatic_cleaning(self, dry_run: bool = False, confirm: bool = True) -> None:
        """Run automatic cleaning based on predefined rules"""
        candidates = self.get_candidates_for_deletion()
        
        to_delete = []
        
        # 1. Always delete command not found
        to_delete.extend(candidates["not_found"])
        
        # 2. Delete invalid paths
        to_delete.extend(candidates["invalid_paths"])
        
        # 3. Delete high-confidence typos
        to_delete.extend(candidates["typos"])
        
        # Summary and confirmation
        console.print(Panel.fit("[bold]AUTOMATIC CLEANING[/bold]", border_style="blue"))
        console.print(f"Found {len(to_delete)} commands to delete:")
        console.print(f"- Command not found: {len(candidates['not_found'])}")
        console.print(f"- Invalid paths: {len(candidates['invalid_paths'])}")
        console.print(f"- Typos: {len(candidates['typos'])}")
        
        if not to_delete:
            console.print("[yellow]No commands selected for deletion.[/yellow]")
            return
            
        # Execute deletion
        if not confirm or typer.confirm(f"Delete {len(to_delete)} selected commands? THIS CANNOT BE UNDONE"):
            self.delete_commands(to_delete, dry_run)


@app.command("analyze")
def analyze_history():
    """Analyze atuin history and show statistics"""
    cleaner = AtuinHistoryCleaner()
    stats = cleaner.analyze_history()
    cleaner.print_analysis(stats)


@app.command("interactive")
def interactive_cleaning():
    """Run interactive cleaning session"""
    cleaner = AtuinHistoryCleaner()
    cleaner.run_interactive_cleaning()


@app.command("clean")
def automatic_cleaning(
    dry_run: bool = typer.Option(False, "--dry-run", help="Don't actually delete anything"),
    no_confirm: bool = typer.Option(False, "--no-confirm", help="Don't ask for confirmation before deletion"),
):
    """Run automatic cleaning based on predefined rules"""
    cleaner = AtuinHistoryCleaner()
    cleaner.automatic_cleaning(dry_run=dry_run, confirm=not no_confirm)


if __name__ == "__main__":
    app()