#!/usr/bin/env bash
# closure-size: A utility to generate Nix closure size reports
# Usage: closure-size [package1 package2 ...]

set -e

# Text formatting
BOLD="\033[1m"
RESET="\033[0m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"

function print_help() {
  echo -e "${BOLD}closure-size${RESET}: A utility to generate Nix closure size reports"
  echo
  echo "Usage:"
  echo "  closure-size [OPTIONS] [PACKAGE...]"
  echo
  echo "Options:"
  echo "  -h, --help       Show this help message"
  echo "  -t, --top N      Show top N largest dependencies (default: 10)"
  echo "  -s, --sort SIZE  Sort by size (default: DESC)"
  echo "  -r, --raw        Display raw numbers instead of human-readable sizes"
  echo "  -j, --json       Output in JSON format"
  echo
  echo "Examples:"
  echo "  closure-size vim"
  echo "  closure-size -t 5 firefox chromium"
  echo "  closure-size -j android-tools > report.json"
}

# Default values
TOP_DEPS=10
SORT_ORDER="DESC"
HUMAN_READABLE=true
JSON_OUTPUT=false

# Parse arguments
PACKAGES=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      print_help
      exit 0
      ;;
    -t|--top)
      TOP_DEPS="$2"
      shift 2
      ;;
    -s|--sort)
      SORT_ORDER="$2"
      shift 2
      ;;
    -r|--raw)
      HUMAN_READABLE=false
      shift
      ;;
    -j|--json)
      JSON_OUTPUT=true
      shift
      ;;
    *)
      PACKAGES+=("$1")
      shift
      ;;
  esac
done

if [ ${#PACKAGES[@]} -eq 0 ]; then
  echo "Error: No packages specified"
  echo "Run 'closure-size --help' for usage information"
  exit 1
fi

# Function to calculate closure size
function get_closure_size() {
  local pkg="$1"
  local store_path
  
  # Try to get the store path
  if ! store_path=$(nix-build '<nixpkgs>' -A "$pkg" --no-out-link 2>/dev/null); then
    echo "Error: Package '$pkg' not found" >&2
    return 1
  fi
  
  # Calculate total closure size
  local total_size
  total_size=$(nix path-info -S -r "$store_path" | awk '{s+=$2} END {print s}')
  
  echo "$total_size"
}

# Function to get human-readable size
function human_size() {
  local size="$1"
  if [ "$HUMAN_READABLE" = true ]; then
    if [ "$size" -gt 1073741824 ]; then
      echo "$(echo "scale=2; $size/1024/1024/1024" | bc) GB"
    elif [ "$size" -gt 1048576 ]; then
      echo "$(echo "scale=2; $size/1024/1024" | bc) MB"
    elif [ "$size" -gt 1024 ]; then
      echo "$(echo "scale=2; $size/1024" | bc) KB"
    else
      echo "$size B"
    fi
  else
    echo "$size"
  fi
}

# Function to get top dependencies by size
function get_top_deps() {
  local pkg="$1"
  local count="$2"
  local store_path
  
  if ! store_path=$(nix-build '<nixpkgs>' -A "$pkg" --no-out-link 2>/dev/null); then
    return 1
  fi
  
  if [ "$SORT_ORDER" = "DESC" ]; then
    nix path-info -S -h -r "$store_path" | sort -nrk2 | head -n "$count"
  else
    nix path-info -S -h -r "$store_path" | sort -nk2 | head -n "$count"
  fi
}

# Function to count dependencies
function count_deps() {
  local pkg="$1"
  local store_path
  
  if ! store_path=$(nix-build '<nixpkgs>' -A "$pkg" --no-out-link 2>/dev/null); then
    return 1
  fi
  
  nix path-info -r "$store_path" | wc -l
}

# Generate report
if [ "$JSON_OUTPUT" = true ]; then
  # JSON output
  echo "{"
  echo "  \"packages\": ["
  for ((i=0; i<${#PACKAGES[@]}; i++)); do
    pkg="${PACKAGES[$i]}"
    echo "    {"
    echo "      \"name\": \"$pkg\","
    
    size=$(get_closure_size "$pkg")
    if [ $? -ne 0 ]; then
      echo "      \"error\": \"Package not found\""
    else
      deps_count=$(count_deps "$pkg")
      echo "      \"closureSize\": $size,"
      echo "      \"humanSize\": \"$(human_size "$size")\","
      echo "      \"dependenciesCount\": $deps_count,"
      echo "      \"topDependencies\": ["
      
      # Get top dependencies
      top_deps=$(get_top_deps "$pkg" "$TOP_DEPS")
      IFS=$'\n' read -rd '' -a deps_array <<< "$top_deps"
      
      for ((j=0; j<${#deps_array[@]}; j++)); do
        dep_line="${deps_array[$j]}"
        dep_path=$(echo "$dep_line" | awk '{print $1}')
        dep_size=$(echo "$dep_line" | awk '{print $2}')
        dep_name=$(basename "$dep_path")
        
        echo "        {"
        echo "          \"path\": \"$dep_path\","
        echo "          \"name\": \"$dep_name\","
        echo "          \"size\": \"$dep_size\""
        if [ $j -lt $((${#deps_array[@]} - 1)) ]; then
          echo "        },"
        else
          echo "        }"
        fi
      done
      
      echo "      ]"
    fi
    
    if [ $i -lt $((${#PACKAGES[@]} - 1)) ]; then
      echo "    },"
    else
      echo "    }"
    fi
  done
  echo "  ]"
  echo "}"
else
  # Text output
  for pkg in "${PACKAGES[@]}"; do
    echo -e "${BOLD}Closure size report for${RESET} ${GREEN}$pkg${RESET}"
    
    size=$(get_closure_size "$pkg")
    if [ $? -ne 0 ]; then
      continue
    fi
    
    deps_count=$(count_deps "$pkg")
    
    echo -e "${BOLD}Total closure size:${RESET} ${BLUE}$(human_size "$size")${RESET}"
    echo -e "${BOLD}Dependencies count:${RESET} ${BLUE}$deps_count${RESET}"
    echo
    echo -e "${BOLD}Top $TOP_DEPS dependencies by size:${RESET}"
    echo
    
    # Get top dependencies
    get_top_deps "$pkg" "$TOP_DEPS" | while read -r line; do
      dep_path=$(echo "$line" | awk '{print $1}')
      dep_size=$(echo "$line" | awk '{print $2}')
      dep_name=$(basename "$dep_path")
      
      echo -e "${YELLOW}$dep_name${RESET}: $dep_size"
    done
    
    echo
    echo "-------------------------------------------"
    echo
  done
fi